const webrtc = new Vue({
    el: "#subscriber-wrapper",
    data: {
        userName: 'Anonymous',
        vonageOnlySignalHelper: null,
        vonageHelper: null,
        isBroadcast: false,
        audioLevel: 0,
        signalText: {
            type: '',
            data: '',
        },
    },
    computed: {
        connectButtonText() {
            return this.vonageHelper.isConnected ? 'dis connect' : 'connect'
        },
        publishButtonText() {
            return this.vonageHelper.isPublished ? 'stop publish' : 'start publish'
        },
        audioButtonText() {
            return this.vonageHelper.enableAudio ? 'stop audio' : 'start audio'
        },
        videoButtonText() {
            return this.vonageHelper.enableVideo ? 'stop video' : 'start video'
        },
    },
    watch: {
        vonageHelper: {
            handler: function(newValue) {
                //console.log(newValue);
            },
            deep: true
        },
    },
    created() {
        '<%= @campaign.status %>' === '1' ? this.isBroadcast = true : this.isBroadcast = false

        this.vonageOnlySignalHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.sub_session_id %>',
            '<%= @opentokInfo[:token] %>',
            true
        );
        this.vonageOnlySignalHelper.init();
        this.vonageOnlySignalHelper.registerSignalEvent('broadcast', this.setBroadcast);
        this.vonageOnlySignalHelper.sessionConnect();

        this.vonageHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.session_id %>',
            '',
        );
        this.vonageHelper.init();
        this.vonageHelper.registerSignalEvent('broadcast', this.setBroadcast);
    },
    mounted() {
        // オーディオレベルを取得
        setInterval(() => {
            $("#audio-level > div").width(`${this.vonageHelper.audioLevel * 100}%`);
        }, 100);

        // デバイスソース変更時イベント
        navigator.mediaDevices.ondevicechange = async (event) => {
            await this.vonageHelper.deviceUpdated();
        }
    },
    methods: {
        setBroadcast(event) {
            this.isBroadcast = event.data === 'true';
            if (this.isBroadcast) return;
            if (!this.vonageOnlySignalHelper.isConnected) this.vonageOnlySignalHelper.sessionConnect();
            this.vonageHelper.sessionDisconnect();
        },
        connect() {
            if(this.vonageHelper.isConnected) {
                this.vonageOnlySignalHelper.sessionConnect();
                this.vonageHelper.sessionDisconnect();
            } else {
                const url = `/campaigns/${'<%= @campaign.id %>'}/generate_subscriber_token`;
                Utility.getToken(url, this.userName, (token) => {
                    if (token === '') return;
                    this.vonageHelper.token = token;
                    this.vonageOnlySignalHelper.sessionDisconnect();
                    this.vonageHelper.sessionConnect();
                });
            }
        },
        publish() {
            this.vonageHelper.isPublished ? this.vonageHelper.unPublish() : this.vonageHelper.publish()
        },
        sendSignal() {
            if (this.signalText.type === '' || this.signalText.data === '') return;
            this.vonageHelper.sendSignal(this.signalText.type, this.signalText.data);
            this.signalText.type = '';
            this.signalText.data = '';
        },
    },
});