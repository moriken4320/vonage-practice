const webrtc = new Vue({
    el: "#subscriber-wrapper",
    data: {
        userName: 'Anonymous',  // ユーザー名
        vonageOnlySignalHelper: null,  // シグナル専用vonageHelperインスタンス
        vonageHelper: null,  // vonageHelperインスタンス
        audioLevel: 0,  // オーディオレベル
        signalText: {  // 送信シグナルデータ
            type: '',
            data: '',
        },
        isBroadcast: false,  // 視聴者へ向けて配信しているかどうか
        enabledAudioSubscribe: true,  // 音声をサブスクライブしているかの可否
    },
    computed: {
        // 接続・切断ボタンテキスト
        connectButtonText() {
            switch(true) {
                case this.vonageHelper.isConnected && this.vonageHelper.isPublished:
                    return 'back to subscriber';
                case this.vonageHelper.isConnected:
                    return 'dis connect';
                default:
                    return 'connect';
            }
        },
        // 音声ON/OFFボタンテキスト
        audioButtonText() {
            return this.vonageHelper.enableAudio ? 'stop audio' : 'start audio'
        },
        // 映像ON/OFFボタンテキスト
        videoButtonText() {
            return this.vonageHelper.enableVideo ? 'stop video' : 'start video'
        },
        // 映像ON/OFFボタンテキスト
        audioSubscribeButtonText() {
            return this.enabledAudioSubscribe ? 'stop audio subscribe' : 'start audio subscribe'
        },
    },
    watch: {
        vonageHelper: {
            handler: function(newValue) {
                //console.log(newValue);
            },
            deep: true
        },
    },
    created() {
        '<%= @campaign.status %>' === '1' ? this.isBroadcast = true : this.isBroadcast = false

        // シグナル専用インスタンスを生成 //////////////////
        this.vonageOnlySignalHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.sub_session_id %>',
            '<%= @opentokInfo[:token] %>',
            true
        );
        this.vonageOnlySignalHelper.init();
        // signal:broadcastイベントを登録
        this.vonageOnlySignalHelper.registerSignalEvent('broadcast', this.setBroadcast);
        // セッションに接続
        this.vonageOnlySignalHelper.sessionConnect();

        // 配信用インスタンスを生成 //////////////////////
        this.vonageHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.session_id %>',
            '',
            true,
            {
                disConnectedFunction: (event) => {
                    if (!this.vonageHelper.isOnlySubscribe)  {
                        this.vonageHelper.setOnlySubscribe(true);
                        setTimeout(() => {
                            this.connect();
                        }, 1000);
                    }
                },
            }
        );
        this.vonageHelper.init();
        this.vonageHelper.deviceUpdated();
        // signal:broadcastイベントを登録
        this.vonageHelper.registerSignalEvent('broadcast', this.setBroadcast);
        // signal:receiveTokenイベントを登録
        this.vonageHelper.registerSignalEvent('receiveToken', this.connectAsPublisher);
    },
    mounted() {
        // オーディオレベルを取得
        setInterval(() => {
            $("#audio-level > div").width(`${this.vonageHelper.audioLevel * 100}%`);
        }, 100);

        // デバイスソース変更時イベント
        navigator.mediaDevices.ondevicechange = async (event) => {
            await this.vonageHelper.deviceUpdated();
        }
    },
    methods: {
        /**
         * 視聴者への配信が開始・停止した際の処理
         * @param {object} event
         */
        setBroadcast(event) {
            this.isBroadcast = event.data === 'true';
            if (this.isBroadcast) return;
            if (!this.vonageOnlySignalHelper.isConnected) this.vonageOnlySignalHelper.sessionConnect();
            this.vonageHelper.sessionDisconnect();
        },
        /**
         * セッションに接続・切断
         */
        connect() {
            if(this.vonageHelper.isConnected) {
                this.vonageOnlySignalHelper.sessionConnect();
                this.vonageHelper.sessionDisconnect();
            } else {
                const url = `/campaigns/${'<%= @campaign.id %>'}/generate_subscriber_token`;
                Utility.getToken(url, this.userName, (token) => {
                    if (token === '') return;
                    this.vonageHelper.token = token;
                    this.vonageOnlySignalHelper.sessionDisconnect();
                    this.vonageHelper.sessionConnect();
                });
            }
        },
        /**
         * シグナル送信
         */
        sendSignal() {
            if (this.signalText.type === '' || this.signalText.data === '') return;
            this.vonageHelper.sendSignal(this.signalText.type, this.signalText.data);
            this.signalText.type = '';
            this.signalText.data = '';
        },
        /**
         * 挙手
         */
        handsUp() {
            if (this.userName === '') return;
            if (this.vonageHelper.existedModeratorCount > 0) {
                this.vonageHelper.sendSignal('authRequest', this.userName);
            } else {
                window.alert('ホストがセッションに存在しません。');
            }
        },
        /**
         * 認証されトークンを受け取り、publihserとしてセッション接続
         * @param {object} event
         */
        connectAsPublisher(event) {
            this.vonageHelper.sessionDisconnect();
            setTimeout(() => {
                this.vonageHelper.token = event.data;
                this.vonageHelper.setOnlySubscribe(false);
                this.vonageHelper.enableAudio = false;
                this.vonageHelper.enableVideo = false;
                this.vonageHelper.sessionConnect();
            }, 1000);
        },
        /**
         * サブスクライバーの音声を一括ミュート
         */
        audioMuteAll() {
            this.enabledAudioSubscribe = !this.enabledAudioSubscribe
            this.vonageHelper.subscribeObjs.forEach((subscriber) => {
                subscriber.subscribeToAudio(this.enabledAudioSubscribe);
            });
        }
    },
});