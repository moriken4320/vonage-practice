const webrtc = new Vue({
    el: "#moderator-wrapper",
    data: {
        userName: '',
        vonageOnlySignalHelper: null,
        vonageHelper: null,
        audioLevel: 0,
        signalText: {
            type: '',
            data: '',
        },
        signalTarget: null,
        isBroadcast: false,
    },
    computed: {
        connectButtonText() {
            return this.vonageHelper.isConnected ? 'dis connect' : 'connect'
        },
        publishButtonText() {
            return this.vonageHelper.isPublished ? 'stop publish' : 'start publish'
        },
        audioButtonText() {
            return this.vonageHelper.enableAudio ? 'stop audio' : 'start audio'
        },
        videoButtonText() {
            return this.vonageHelper.enableVideo ? 'stop video' : 'start video'
        },
        broadcastButtonText() {
            return this.isBroadcast ? 'stop broadcast' : 'start broadcast'
        },
    },
    watch: {
        vonageHelper: {
            handler: function(newValue) {
                //console.log(newValue);
            },
            deep: true
        },
    },
    created() {
        '<%= @campaign.status %>' === '1' ? this.isBroadcast = true : this.isBroadcast = false

        this.vonageOnlySignalHelper = new VonageOnlySignalHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.sub_session_id %>',
            '<%= @opentokInfo[:token] %>',
        );

        this.vonageHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.session_id %>',
            ''
        );

        this.vonageOnlySignalHelper.initForModerator();
        this.vonageHelper.initForModerator();
    },
    mounted() {
        // オーディオレベルを取得
        setInterval(() => {
            $("#audio-level > div").width(`${this.vonageHelper.audioLevel * 100}%`);
        }, 100);

        // デバイスソース変更時イベント
        navigator.mediaDevices.ondevicechange = async (event) => {
            await this.vonageHelper.deviceUpdated();
        }
    },
    methods: {
        join() {
            if (this.userName === '') return;
            const url = `/campaigns/${'<%= @campaign.id %>'}/generate_moderator_token`;
            Utility.getToken(url, this.userName, (token) => {
                this.vonageHelper.token = token;
                this.vonageOnlySignalHelper.sessionConnect();
                this.vonageHelper.sessionConnect();
            });
        },
        connect() {
            if(this.vonageHelper.isConnected) {
                this.vonageOnlySignalHelper.sessionDisconnect();
                this.vonageHelper.sessionDisconnect();
            } else {
                this.vonageOnlySignalHelper.sessionConnect();
                this.vonageHelper.sessionConnect();
            }
        },
        publish() {
            this.vonageHelper.isPublished ? this.vonageHelper.unPublish() : this.vonageHelper.publish()
        },
        sendSignal() {
            if (this.signalText.type === '' || this.signalText.data === '') return;

            switch (this.signalText.type) {
                case 'changeName':
                    this.changeNameForTarget();
                    break;
                default:
                    this.vonageHelper.sendSignal(this.signalText.type, this.signalText.data, this.signalTarget);
                    this.signalText.type = '';
                    this.signalText.data = '';
            }
        },
        allowRequest(requestInfo) {
            const url = `/campaigns/${'<%= @campaign.id %>'}/generate_publisher_token`;
            Utility.getToken(url, requestInfo.data, (token) => {
                this.vonageOnlySignalHelper.sendSignal('receiveToken', token, requestInfo.from);
                this.removeRequest(requestInfo);
            });
        },
        removeRequest(requestInfo) {
            this.vonageOnlySignalHelper.authRequests = this.vonageOnlySignalHelper.authRequests.filter(function(request) {
                return request !== requestInfo;
            });
        },
        changeNameForTarget() {
            const url = `/campaigns/${'<%= @campaign.id %>'}/generate_publisher_token`;
            Utility.getToken(url, this.signalText.data, (token) => {
                this.vonageHelper.sendSignal(this.signalText.type, token, this.signalTarget);
                this.signalText.type = '';
                this.signalText.data = '';
            });
        },
        broadcast() {
            let url;
            this.isBroadcast ? url = `/campaigns/${'<%= @campaign.id %>'}/stop_broadcast` : url = `/campaigns/${'<%= @campaign.id %>'}/start_broadcast`
            window.axios.get(url).then((response) => this.isBroadcast = response.data);
        },
    },
});