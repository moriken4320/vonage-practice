const webrtc = new Vue({
    el: "#moderator-wrapper",
    data: {
        userName: '',  // ユーザー名
        vonageOnlySignalHelper: null,  // シグナル専用vonageHelperインスタンス
        vonageHelper: null,  // vonageHelperインスタンス
        audioLevel: 0,  // オーディオレベル
        signalText: {  // 送信シグナルデータ
            type: '',
            data: '',
            to: null,
        },
        authRequests: [],  // パネリストからの認証リクエストリスト
        isBroadcast: false,  // 視聴者へ向けて配信しているかどうか
        isRecorded: false,  // 録画しているかどうか
        archiveLayoutOptionsWhenBase: {  // デフォルトの録画レイアウトオプション
            type: 'bestFit',
        },
        archiveLayoutOptionsWhenScreenSharing: {  // 画面共有中の録画レイアウトオプション
            type: 'custom',
            stylesheet: "stream { \
                float: left; \
                left: 0px; \
                clear: left; \
                width: 10%; \
                height: 10%; \
            } \
            stream.focus { \
                position: absolute; \
                top: 0; left: 10%; \
                margin: 0px; \
                width: 90%; \
                height: 100%; \
            }",
        },
        isMonitorRole: false,  // モニターロールとして接続するかどうか
    },
    computed: {
        // 接続・切断ボタンテキスト
        connectButtonText() {
            return this.vonageHelper.isConnected ? 'dis connect' : 'connect'
        },
        // 音声ON/OFFボタンテキスト
        audioButtonText() {
            return this.vonageHelper.enableAudio ? 'stop audio' : 'start audio'
        },
        // 映像ON/OFFボタンテキスト
        videoButtonText() {
            return this.vonageHelper.enableVideo ? 'stop video' : 'start video'
        },
        // 視聴者へ配信開始・停止ボタンテキスト
        broadcastButtonText() {
            return this.isBroadcast ? 'stop broadcast' : 'start broadcast'
        },
        // 録画開始・停止ボタンテキスト
        recordingButtonText() {
            return this.isRecorded ? 'stop recording' : 'start recording'
        },
    },
    watch: {
        vonageHelper: {
            handler: function(newValue) {
                //console.log(newValue);
            },
            deep: true
        },
    },
    created() {
        this.isBroadcast = '<%= @campaign.status %>' === '1';
        this.isRecorded = '<%= @campaign.is_recorded %>' === 'true';

        // シグナル専用インスタンスを生成 //////////////////
        this.vonageOnlySignalHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.sub_session_id %>',
            '<%= @opentokInfo[:token] %>',
            true
        );
        this.vonageOnlySignalHelper.init();
        // signal:authRequestイベントを登録
        this.vonageOnlySignalHelper.registerSignalEvent('authRequest', this.setAuthRequests);
        // signal:removeAuthRequestイベントを登録
        this.vonageOnlySignalHelper.registerSignalEvent('removeAuthRequest', (event) => {
            // 受信した情報と一致するパネリストからの認証リクエストリスト内の情報を削除
            this.authRequests = this.authRequests.filter(function(request) {
                return request.from.connectionId !== event.data;
            });
        });

        // 配信用インスタンスを生成 //////////////////////
        this.vonageHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.session_id %>',
            '',
            false,
            '<%= url_for("/images/webinar_audio_off.svg") %>',
            `${location.protocol}//${location.host}<%= url_for("/images/webinar_video_off.svg") %>`,
            {
                disConnectedFunction: () => {
                    this.authRequests = [];
                },
                archiveStartedFunction: () => {
                    console.log('録画を開始しました。');
                },
                archiveStoppedFunction: () => {
                    console.log('録画を停止しました。');
                },
                changeArchiveLayout: this.changeArchiveLayout,
            },
        );
        this.vonageHelper.init();
        // signal:authRequestイベントを登録
        this.vonageHelper.registerSignalEvent('authRequest', this.setAuthRequests);
        // signal:removeAuthRequestイベントを登録
        this.vonageHelper.registerSignalEvent('removeAuthRequest', (event) => {
            // 受信した情報と一致するパネリストからの認証リクエストリスト内の情報を削除
            this.authRequests = this.authRequests.filter(function(request) {
                return request.from.connectionId !== event.data;
            });
        });
        this.vonageHelper.initPublisher();
    },
    mounted() {
        window.axios.defaults.headers.common['X-CSRF-Token'] = $('meta[name="csrf-token"]').attr('content');

        // オーディオレベルを取得
        setInterval(() => {
            $("#audio-level > div").width(`${this.vonageHelper.audioLevel * 100}%`);
        }, 100);

        // デバイスソース変更時イベント
        navigator.mediaDevices.ondevicechange = async (event) => {
            await this.vonageHelper.deviceUpdated();
        }

        // リロード、クローズ時の処理サンプル
        /*
        $(window).on("beforeunload", (event) => {
            // 以下URLのHTTPメソッドはPOSTである必要がある。
            const url = "任意のURL";
            const payload = new FormData();

            // CSRF用
            const param = $('meta[name="csrf-param"]').attr('content');
            const token = $('meta[name="csrf-token"]').attr('content');
            payload.append(param, token);

            // 送るパラメータ
            payload.append("key", "value");

            navigator.sendBeacon(url, payload);
        });
        */
    },
    methods: {
        /**
         * パネリストからの認証リクエストデータを「authRequests」に格納
         * @param {object} event
         */
        setAuthRequests(event) {
            // 送信先が異なるデータのみを抜粋
            this.authRequests = this.authRequests.filter(function(request) {
                return request.from !== event.from;
            });
            this.authRequests.push(event);
        },
        /**
         * 指定した名前でセッションに接続
         */
        join() {
            if (this.userName === '' && !this.isMonitorRole) return;

            this.vonageHelper.setOnlySubscribe(this.isMonitorRole);
            const url = `/campaigns/${'<%= @campaign.id %>'}/generate_moderator_token`;
            Utility.getToken(url, this.userName, (token) => {
                // シグナル専用インスタンスでセッションに接続
                this.vonageOnlySignalHelper.sessionConnect();

                // モデレーター用トークンを取得し、配信用インスタンスでセッションに接続
                this.vonageHelper.token = token;
                this.vonageHelper.sessionConnect();
            });
        },
        /**
         * セッションに接続・切断
         */
        connect() {
            if(this.vonageHelper.isConnected) {
                this.vonageOnlySignalHelper.sessionDisconnect();
                this.vonageHelper.sessionDisconnect();
            } else {
                this.vonageOnlySignalHelper.sessionConnect();
                this.vonageHelper.sessionConnect();
            }
        },
        /**
         * シグナル送信
         */
        sendSignal() {
            if (this.signalText.type === '' || this.signalText.data === '') return;

            this.vonageHelper.sendSignal(this.signalText.type, this.signalText.data, this.signalText.to);
            this.signalText.type = '';
            this.signalText.data = '';
        },
        /**
         * パネリストからの認証リクエストを許可
         */
        allowRequest(requestInfo) {
            const url = `/campaigns/${'<%= @campaign.id %>'}/generate_publisher_token`;
            Utility.getToken(url, requestInfo.data, (token) => {
                // 取得したトークンを認証リクエスト送信者に送信
                this.vonageOnlySignalHelper.sendSignal('receiveToken', token, requestInfo.from);
                this.vonageHelper.sendSignal('receiveToken', token, requestInfo.from);
                this.removeRequest(requestInfo);
            });
        },
        /**
         * パネリストからの認証リクエストリストを削除
         */
        removeRequest(requestInfo) {
            this.authRequests = this.authRequests.filter(function(request) {
                return request !== requestInfo;
            });
            // 他のmoderatorに削除情報を通知
            this.vonageOnlySignalHelper.sendSignal('removeAuthRequest', requestInfo.from.connectionId);
        },
        /**
         * 視聴者への配信を開始・停止
         */
        broadcast() {
            const url = this.isBroadcast ? `/campaigns/${'<%= @campaign.id %>'}/stop_broadcast` : `/campaigns/${'<%= @campaign.id %>'}/start_broadcast`
            window.axios.get(url).then((response) => {
                this.isBroadcast = response.data;
                const isBroadcastText = this.isBroadcast ? 'true' : 'false';
                this.vonageOnlySignalHelper.sendSignal('broadcast', isBroadcastText);
                this.vonageHelper.sendSignal('broadcast', isBroadcastText);
            });
        },
        /**
         * 録画の開始・停止
         */
        recording() {
            const url = this.isRecorded ? `/campaigns/${'<%= @campaign.id %>'}/stop_recording` : `/campaigns/${'<%= @campaign.id %>'}/start_recording`
            const archiveLayoutOptions = this.vonageHelper.isScreenShared ? this.archiveLayoutOptionsWhenScreenSharing : this.archiveLayoutOptionsWhenBase;
            window.axios.put(url, {layout: archiveLayoutOptions}).then((response) => {
                this.isRecorded = response.data;
            });
        },
        /**
         * 録画のレイアウト変更
         */
        changeArchiveLayout(eventName, event) {
            const videoType = event.stream.videoType;
            if (videoType !== 'screen') return;
            const url = `/campaigns/${'<%= @campaign.id %>'}/change_archive_layout`;

            let archiveLayoutOptions;
            switch (eventName) {
                case 'streamCreated':
                    archiveLayoutOptions = this.archiveLayoutOptionsWhenScreenSharing;
                    break;
                default:
                    archiveLayoutOptions = this.archiveLayoutOptionsWhenBase;
            }

            let screenStreamLayoutClassOptions;
            switch (eventName) {
                case 'streamCreated':
                    screenStreamLayoutClassOptions = {
                        items: [
                            {
                                id: event.stream.id,
                                layoutClassList: ["focus"]
                            }
                        ]
                    };
                    break;
                default:
                    screenStreamLayoutClassOptions = null;
            }

            window.axios.put(url, {
                layout: archiveLayoutOptions,
                layoutClass: screenStreamLayoutClassOptions
            });
        },
    },
});