const webrtc = new Vue({
    el: "#publisher-wrapper",
    data: {
        userName: '',  // ユーザー名
        vonageOnlySignalHelper: null,  // シグナル専用vonageHelperインスタンス
        vonageHelper: null,  // vonageHelperインスタンス
        audioLevel: 0,  // オーディオレベル
        signalText: {  // 送信シグナルデータ
            type: '',
            data: '',
        },
    },
    computed: {
        // 接続・切断ボタンテキスト
        connectButtonText() {
            return this.vonageHelper?.isConnected ? 'dis connect' : 'connect'
        },
        // 音声ON/OFFボタンテキスト
        audioButtonText() {
            return this.vonageHelper?.enableAudio ? 'stop audio' : 'start audio'
        },
        // 映像ON/OFFボタンテキスト
        videoButtonText() {
            return this.vonageHelper?.enableVideo ? 'stop video' : 'start video'
        },
    },
    watch: {
        vonageHelper: {
            handler: function(newValue) {
                //console.log(newValue);
            },
            deep: true
        },
    },
    created() {
        // シグナル専用インスタンスを生成 //////////////////
        this.vonageOnlySignalHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.sub_session_id %>',
            '<%= @opentokInfo[:token] %>',
            true
        );
        this.vonageOnlySignalHelper.init();
        // signal:receiveTokenイベントを登録
        this.vonageOnlySignalHelper.registerSignalEvent('receiveToken', this.initConnect);
        // セッションに接続
        this.vonageOnlySignalHelper.sessionConnect();

        // 配信用インスタンスを生成 //////////////////////
        this.vonageHelper = new VonageHelper(
            '<%= @opentokInfo[:api_key] %>',
            '<%= @campaign.session_id %>',
            '',
            false,
            `${location.protocol}//${location.host}<%= url_for("/images/webinar_video_off.svg") %>`,
            {
                disConnectedFunction: (event) => {
                    if (event.reason === 'forceDisconnected') {
                        this.vonageOnlySignalHelper.sessionConnect();
                    }
                },
                archiveStartedFunction: () => {
                    console.log('録画を開始しました。');
                },
                archiveStoppedFunction: () => {
                    console.log('録画を停止しました。');
                },
            },
        );
        this.vonageHelper.init();
        this.vonageHelper.initPublisher();
    },
    mounted() {
        // オーディオレベルを取得
        setInterval(() => {
            $("#audio-level > div").width(`${this.vonageHelper.audioLevel * 100}%`);
        }, 100);

        // デバイスソース変更時イベント
        navigator.mediaDevices.ondevicechange = async (event) => {
            await this.vonageHelper.deviceUpdated();
        }
    },
    methods: {
        /**
         * 認証されトークンを受け取った後の初期セッション接続
         * @param {object} event
         */
        initConnect(event) {
            this.vonageHelper.token = event.data;
            this.connect();
        },
        /**
         * 認証リクエストを送信
         */
        authRequest() {
            if (this.userName === '') return;
            if (this.vonageOnlySignalHelper.existedModeratorCount > 0) {
                this.vonageOnlySignalHelper.sendSignal('authRequest', this.userName);
            } else {
                window.alert('ホストがセッションに存在しません。');
            }
        },
        /**
         * セッションに接続・切断
         */
        connect() {
            if(this.vonageHelper.isConnected) {
                this.vonageOnlySignalHelper.sessionConnect();
                this.vonageHelper.sessionDisconnect();
            } else {
                this.vonageOnlySignalHelper.sessionDisconnect();
                this.vonageHelper.sessionConnect();
            }
        },
        /**
         * シグナル送信
         */
        sendSignal() {
            if (this.signalText.type === '' || this.signalText.data === '') return;
            this.vonageHelper.sendSignal(this.signalText.type, this.signalText.data);
            this.signalText.type = '';
            this.signalText.data = '';
        },
    },
});