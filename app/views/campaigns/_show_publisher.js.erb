const webrtc = new Vue({
    el: "#publisher-wrapper",
    data: {
        vonageHelper: null,
        userName: '',
        isVerified: false,
        audioLevel: 0,
        signalText: {
            type: '',
            data: '',
        },
        token: '',
    },
    computed: {
        connectButtonText() {
            return this.vonageHelper?.isConnected ? 'dis connect' : 'connect'
        },
        publishButtonText() {
            return this.vonageHelper?.isPublished ? 'stop publish' : 'start publish'
        },
        audioButtonText() {
            return this.vonageHelper?.enableAudio ? 'stop audio' : 'start audio'
        },
        videoButtonText() {
            return this.vonageHelper?.enableVideo ? 'stop video' : 'start video'
        },
    },
    watch: {
        vonageHelper: {
            handler: function(newValue) {
                //console.log(newValue);
            },
            deep: true
        },
        isVerified: function(newValue) {
            if (newValue === true) {
                this.init();
            }
        },
        token: function() {
            if (this.vonageHelper) {
                this.vonageHelper.token = this.token;
                this.vonageHelper.sessionConnect();
            } else {
                this.vonageHelper = new VonageHelper(
                    '<%= @campaign.id %>',
                    '<%= @opentok_info[:api_key] %>',
                    '<%= @campaign.session_id %>',
                    this.token,
                    {changeName: this.changeName},
                );
                ///////
                this.isVerified = true;
                ///////
            }
        },
    },
    created() {

    },
    mounted() {

    },
    methods: {
        authRequest() {
            if (this.userName === '') return;
            this.token = this.getToken();
        },
        init() {
            if (!this.vonageHelper) return;
            this.vonageHelper.initForPublisher();
            // オーディオレベルを取得
            setInterval(() => {
                $("#audio-level > div").width(`${this.vonageHelper.audioLevel * 100}%`);
            }, 100);
            // デバイスソース変更時イベント
            navigator.mediaDevices.ondevicechange = async (event) => {
                await this.vonageHelper.deviceUpdated();
            }
        },
        connect() {
            this.vonageHelper.isConnected ? this.vonageHelper.sessionDisconnect() : this.vonageHelper.sessionConnect()
        },
        publish() {
            this.vonageHelper.isPublished ? this.vonageHelper.unPublish() : this.vonageHelper.publish()
        },
        sendSignal() {
            if (this.signalText.type === '' || this.signalText.data === '') return;
            this.vonageHelper.sendSignal(this.signalText.type, this.signalText.data);
            this.signalText.type = '';
            this.signalText.data = '';
        },
        getToken() {
            window.axios.get(`/campaigns/${'<%= @campaign.id %>'}/generate_publisher_token`, {
                params: {
                    session_id: '<%= @campaign.session_id %>',
                    data: this.userName,
                },
            })
            .then((response) => {
                return response.data;
            });
        },
        changeName() {
            this.userName = this.vonageHelper.userName;
            this.token = this.getToken();
        },
    },
});